{"version":3,"sources":["components/Pages/Register.js","components/Forms/FormValidator.js"],"names":["Register","state","formRegister","email","password","password2","terms","validateOnChange","event","input","target","form","value","type","checked","result","FormValidator","validate","setState","name","errors","onSubmit","e","inputs","elements","filter","i","includes","nodeName","bulkValidate","hasError","console","log","preventDefault","formName","inputName","method","className","href","src","alt","this","htmlFor","placeholder","invalid","onChange","data-validate","id","data-param","label","to","Component","element","isCheckbox","Error","param","getAttribute","validations","JSON","parse","length","forEach","m","validator","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","list","isIn","Object","keys","some","val"],"mappings":"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","file":"static/js/94.ab8f4867.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input, CustomInput } from 'reactstrap';\r\n\r\nimport FormValidator from '../Forms/FormValidator.js';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n        formRegister: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            terms: false\r\n        }\r\n    }\r\n\r\n     /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n      */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\r\n\r\n        e.preventDefault()\r\n    }\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"block-center mt-4 wd-xl\">\r\n                {/* START card */}\r\n                <div className=\"card card-flat\">\r\n                    <div className=\"card-header text-center bg-dark\">\r\n                        <a href=\"\">\r\n                            <img className=\"block-center\" src=\"img/logo.png\" alt=\"Logo\"/>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"text-center py-2\">SIGNUP TO GET INSTANT ACCESS.</p>\r\n                        <form className=\"mb-3\" name=\"formRegister\" onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputEmail1\">Email address</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"email\"\r\n                                        name=\"email\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Enter email\"\r\n                                        invalid={this.hasError('formRegister','email','required')||this.hasError('formRegister','email','email')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"email\"]'\r\n                                        value={this.state.formRegister.email}/>\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-envelope\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                    { this.hasError('formRegister','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">Password</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-password\"\r\n                                        name=\"password\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Password\"\r\n                                        invalid={this.hasError('formRegister','password','required')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\"]'\r\n                                        value={this.state.formRegister.password}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputRePassword1\">Retype Password</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\" name=\"password2\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Retype assword\"\r\n                                        invalid={this.hasError('formRegister','password2','equalto')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"equalto\"]'\r\n                                        value={this.state.formRegister.password2}\r\n                                        data-param=\"id-password\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Field must be equal to previous</span>\r\n                                </div>\r\n                            </div>\r\n                            <CustomInput type=\"checkbox\" id=\"terms\"\r\n                                name=\"terms\"\r\n                                label=\"I agree with the terms\"\r\n                                invalid={this.hasError('formRegister','terms','required')}\r\n                                onChange={this.validateOnChange}\r\n                                data-validate='[\"required\"]'\r\n                                checked={this.state.formRegister.terms}>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                                </CustomInput>\r\n                            <button className=\"btn btn-block btn-primary mt-3\" type=\"submit\">Create account</button>\r\n                        </form>\r\n                        <p className=\"pt-3 text-center\">Have an account?</p>\r\n                        <Link to=\"login\" className=\"btn btn-block btn-secondary\">Signup</Link>\r\n                    </div>\r\n                </div>\r\n                {/* END card */}\r\n                <div className=\"p-3 text-center\">\r\n                    <span className=\"mr-2\">&copy;</span>\r\n                    <span>2020</span>\r\n                    <span className=\"mx-2\">-</span>\r\n                    <span>Angle</span>\r\n                    <br/>\r\n                    <span>Bootstrap Admin Template</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;"],"sourceRoot":""}