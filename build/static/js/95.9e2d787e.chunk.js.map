{"version":3,"sources":["components/Tables/DataGrid.js","components/Layout/ContentWrapper.js"],"names":["PercentCompleteFormatter","props","color","value","AssignedImageFormatter","className","src","alt","DataGrid","context","getRandomDate","start","end","Date","getTime","Math","random","toLocaleDateString","createRows","rows","i","push","id","task","assigned","floor","complete","min","round","priority","issueType","startDate","completeDate","rowGetter","state","handleGridSort","sortColumn","sortDirection","originalRows","slice","sort","a","b","setState","_columns","key","name","width","sortable","formatter","fluid","onGridSort","this","columns","rowsCount","length","minHeight","Component","ContentWrapper","unwrap","children","defaultProps"],"mappings":"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","file":"static/js/95.9e2d787e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport { Container, Progress } from 'reactstrap';\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\n// Custom Formatter component\r\nconst PercentCompleteFormatter = props => (\r\n    <Progress color={props.value < 30 ? 'danger' : props.value < 60 ? 'warning' : 'success'}\r\n        value={props.value}> {props.value}%\r\n    </Progress>\r\n)\r\n\r\nconst AssignedImageFormatter = props => (\r\n    <div className=\"text-center py-2\">\r\n        <img src={props.value} className=\"img-fluid thumb32\" alt=\"avatar\"/>\r\n    </div>\r\n)\r\n\r\nclass DataGrid extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this._columns = [\r\n            {\r\n                key: 'id',\r\n                name: 'ID',\r\n                width: 80\r\n            },\r\n            {\r\n                key: 'task',\r\n                name: 'Title',\r\n                sortable: true\r\n            },\r\n            {\r\n                key: 'assigned',\r\n                name: 'Assigned',\r\n                width: 70,\r\n                formatter: AssignedImageFormatter\r\n            },\r\n            {\r\n                key: 'priority',\r\n                name: 'Priority',\r\n                sortable: true\r\n            },\r\n            {\r\n                key: 'issueType',\r\n                name: 'Issue Type',\r\n                sortable: true\r\n            },\r\n            {\r\n                key: 'complete',\r\n                name: '% Complete',\r\n                formatter: PercentCompleteFormatter,\r\n                sortable: true\r\n            },\r\n            {\r\n                key: 'startDate',\r\n                name: 'Start Date',\r\n                sortable: true\r\n            },\r\n            {\r\n                key: 'completeDate',\r\n                name: 'Expected Complete',\r\n                sortable: true\r\n            }\r\n        ];\r\n\r\n        let originalRows = this.createRows(1000);\r\n        let rows = originalRows.slice(0);\r\n        this.state = { originalRows, rows };\r\n    }\r\n\r\n    getRandomDate = (start, end) => {\r\n        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toLocaleDateString();\r\n    };\r\n\r\n    createRows = () => {\r\n        let rows = [];\r\n        for (let i = 1; i < 100; i++) {\r\n            rows.push({\r\n                id: i,\r\n                task: 'Task ' + i,\r\n                assigned: `img/user/0${(Math.floor(Math.random()*8) + 1)}.jpg`,\r\n                complete: Math.min(100, Math.round(Math.random() * 110)),\r\n                priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor((Math.random() * 3) + 1)],\r\n                issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor((Math.random() * 3) + 1)],\r\n                startDate: this.getRandomDate(new Date(2018, 3, 1), new Date()),\r\n                completeDate: this.getRandomDate(new Date(), new Date(2021, 0, 1))\r\n            });\r\n        }\r\n\r\n        return rows;\r\n    };\r\n\r\n    rowGetter = (i) => this.state.rows[i]\r\n\r\n    handleGridSort = (sortColumn, sortDirection) => {\r\n        const comparer = (a, b) => {\r\n          if (sortDirection === 'ASC') {\r\n            return (a[sortColumn] > b[sortColumn]) ? 1 : -1;\r\n          } else if (sortDirection === 'DESC') {\r\n            return (a[sortColumn] < b[sortColumn]) ? 1 : -1;\r\n          }\r\n        };\r\n\r\n        const rows = sortDirection === 'NONE' ? this.state.originalRows.slice(0) : this.state.rows.sort(comparer);\r\n\r\n        this.setState({ rows });\r\n    };\r\n\r\n    render() {\r\n        return  (\r\n            <ContentWrapper>\r\n                <div className=\"content-heading\">\r\n                    <div>React Data Grid\r\n                        <small>Excel-like grid component built with React</small>\r\n                    </div>\r\n                </div>\r\n                <Container fluid>\r\n                    <ReactDataGrid\r\n                        onGridSort={this.handleGridSort}\r\n                        columns={this._columns}\r\n                        rowGetter={this.rowGetter}\r\n                        rowsCount={this.state.rows.length}\r\n                        minHeight={700} />\r\n                </Container>\r\n            </ContentWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataGrid;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n"],"sourceRoot":""}