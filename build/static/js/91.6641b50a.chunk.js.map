{"version":3,"sources":["components/Forms/FormCropper.js","components/Layout/ContentWrapper.js"],"names":["FormCropper","this","inputImage","$","refs","cropperElement","cropperImage","options","aspectRatio","preview","crop","data","console","log","Math","round","x","y","height","width","rotate","cropper","handleNewImage","blobURL","self","URL","window","webkitURL","change","file","files","length","test","type","createObjectURL","one","revokeObjectURL","val","alert","parent","remove","className","lg","ref","src","alt","htmlFor","title","id","name","accept","Component","ContentWrapper","props","unwrap","children","defaultProps"],"mappings":"mOAQMA,E,uKAEF,WAGIC,KAAKC,WAAaC,IAAEF,KAAKG,KAAKF,YAC9BD,KAAKI,eAAiBF,IAAEF,KAAKG,KAAKE,cAElCL,KAAKM,QAAU,CACXC,YAAa,GAAK,EAClBC,QAAS,eACTC,KAAM,SAASC,GAEXC,QAAQC,IAAI,WAAcC,KAAKC,MAAMJ,EAAKK,IAC1CJ,QAAQC,IAAI,WAAcC,KAAKC,MAAMJ,EAAKM,IAC1CL,QAAQC,IAAI,gBAAmBC,KAAKC,MAAMJ,EAAKO,SAC/CN,QAAQC,IAAI,eAAkBC,KAAKC,MAAMJ,EAAKQ,QAC9CP,QAAQC,IAAI,gBAAmBC,KAAKC,MAAMJ,EAAKS,WAKvDnB,KAAKI,eAAegB,QAAQpB,KAAKM,SAGjCN,KAAKqB,mB,4BAIT,WACI,IAEIC,EAFAC,EAAOvB,KACPwB,EAAMC,OAAOD,KAAOC,OAAOC,UAG3BF,EACAxB,KAAKC,WAAW0B,QAAO,WACnB,IACIC,EADAC,EAAQ7B,KAAK6B,MAGZN,EAAKnB,eAAeM,KAAK,YAI1BmB,GAASA,EAAMC,SACfF,EAAOC,EAAM,GAET,eAAeE,KAAKH,EAAKI,OACzBV,EAAUE,EAAIS,gBAAgBL,GAC9BL,EAAKnB,eAAe8B,IAAI,iBAAiB,WACrCV,EAAIW,gBAAgBb,MACrBF,QAAQ,SAASA,QAAQ,UAAWE,GACvCC,EAAKtB,WAAWmC,IAAI,KAEpBC,MAAM,oCAKlBrC,KAAKC,WAAWqC,SAASC,W,kCAIjC,WACIvC,KAAKI,eAAegB,QAAQ,a,oBAGhC,WACI,OACI,eAAC,IAAD,WACI,qBAAKoB,UAAU,kBAAf,SACI,gDACI,uEAGR,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,GAAK,EAAV,SACI,qBAAKD,UAAU,sBAAf,SACI,qBAAKE,IAAI,eAAeC,IAAI,oBAAoBC,IAAI,eAG5D,cAAC,IAAD,CAAKH,GAAK,EAAV,SACI,sBAAKD,UAAU,wBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,mCAI3B,cAAC,IAAD,CAAKA,UAAU,KAAf,SACI,cAAC,IAAD,CAAKC,GAAK,EAAV,SACI,wBAAOI,QAAQ,aAAaC,MAAM,oBAAoBN,UAAU,0BAAhE,UACI,uBAAOE,IAAI,aAAaK,GAAG,aAAaC,KAAK,OAAOhB,KAAK,OAAOiB,OAAO,UAAUT,UAAU,YAC3F,sBAAMM,MAAM,8BAA8BN,UAAU,eAApD,2C,GA9FNU,aA2GXnD,a,iCCnHf,gBAMMoD,EAAiB,SAAAC,GAAK,OACxB,qBAAKZ,UAAU,kBAAf,SACKY,EAAMC,OACF,qBAAKb,UAAU,SAAf,SAAyBY,EAAME,WAE/BF,EAAME,YASnBH,EAAeI,aAAe,CAC1BF,QAAQ,GAGGF","file":"static/js/91.6641b50a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport $ from 'jquery';\r\n// Image Cropper\r\nimport 'cropper/dist/cropper.css';\r\nimport 'cropper/dist/cropper.js';\r\n\r\nclass FormCropper extends Component {\r\n\r\n    componentDidMount() {\r\n        // var self = this;\r\n\r\n        this.inputImage = $(this.refs.inputImage); // upload button\r\n        this.cropperElement = $(this.refs.cropperImage); // image for cropper\r\n\r\n        this.options = {\r\n            aspectRatio: 16 / 9,\r\n            preview: '.img-preview',\r\n            crop: function(data) {\r\n                // console.log(self.cropperElement.cropper('getCroppedCanvas').toDataURL()); // base64\r\n                console.log('Data X: ' + (Math.round(data.x)));\r\n                console.log('Data Y: ' + (Math.round(data.y)));\r\n                console.log('Data Height: ' + (Math.round(data.height)));\r\n                console.log('Data Width: ' + (Math.round(data.width)));\r\n                console.log('Data Rotate: ' + (Math.round(data.rotate)));\r\n            }\r\n        };\r\n\r\n        // init plugin\r\n        this.cropperElement.cropper(this.options);\r\n\r\n        // prepare to handle image upload\r\n        this.handleNewImage();\r\n\r\n    }\r\n\r\n    handleNewImage() {\r\n        var self = this;\r\n        var URL = window.URL || window.webkitURL,\r\n            blobURL;\r\n\r\n        if (URL) {\r\n            this.inputImage.change(function() {\r\n                var files = this.files,\r\n                    file;\r\n\r\n                if (!self.cropperElement.data('cropper')) {\r\n                    return;\r\n                }\r\n\r\n                if (files && files.length) {\r\n                    file = files[0];\r\n\r\n                    if (/^image\\/\\w+$/.test(file.type)) {\r\n                        blobURL = URL.createObjectURL(file);\r\n                        self.cropperElement.one('built.cropper', function() {\r\n                            URL.revokeObjectURL(blobURL); // Revoke when load complete\r\n                        }).cropper('reset').cropper('replace', blobURL);\r\n                        self.inputImage.val('');\r\n                    } else {\r\n                        alert('Please choose an image file.');\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            this.inputImage.parent().remove();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.cropperElement.cropper('destroy');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentWrapper>\r\n                <div className=\"content-heading\">\r\n                    <div>Image Cropper\r\n                        <small>Simple image cropping plugin.</small>\r\n                    </div>\r\n                </div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={ 8 }>\r\n                            <div className=\"img-container mb-lg\">\r\n                                <img ref=\"cropperImage\" src=\"img/mb-sample.jpg\" alt=\"Sample\" />\r\n                            </div>\r\n                        </Col>\r\n                        <Col lg={ 4 }>\r\n                            <div className=\"docs-preview clearfix\">\r\n                                <div className=\"img-preview preview-lg\"></div>\r\n                                <div className=\"img-preview preview-md\"></div>\r\n                                <div className=\"img-preview preview-sm\"></div>\r\n                                <div className=\"img-preview preview-xs\"></div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt\">\r\n                        <Col lg={ 4 }>\r\n                            <label htmlFor=\"inputImage\" title=\"Upload image file\" className=\"btn btn-info btn-upload\">\r\n                                <input ref=\"inputImage\" id=\"inputImage\" name=\"file\" type=\"file\" accept=\"image/*\" className=\"sr-only\" />\r\n                                <span title=\"Import image with Blob URLs\" className=\"docs-tooltip\">\r\n                                Upload image\r\n                                </span>\r\n                            </label>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </ContentWrapper>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default FormCropper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n"],"sourceRoot":""}