{"version":3,"sources":["components/Forms/FormValidation.js","components/Layout/ContentWrapper.js","../node_modules/reactstrap/es/Col.js","../node_modules/reactstrap/es/Row.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","../node_modules/reactstrap/es/CardHeader.js","components/Forms/FormValidator.js","../node_modules/reactstrap/es/CardFooter.js"],"names":["FormValidation","state","formRegister","email","password","password2","terms","formLogin","formDemo","text","number","integer","alphanum","url","minlength","maxlength","length","minval","maxval","list","validateOnChange","event","input","target","form","value","type","checked","result","FormValidator","validate","setState","name","errors","onSubmit","e","inputs","elements","filter","i","includes","nodeName","bulkValidate","hasError","console","log","preventDefault","formName","inputName","method","className","lg","this","action","invalid","onChange","data-validate","id","data-param","label","md","Component","ContentWrapper","props","unwrap","children","defaultProps","stringOrNumberProp","PropTypes","oneOfType","string","columnProps","bool","shape","size","order","offset","propTypes","tag","tagPropType","xs","sm","xl","cssModule","object","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Col","Tag","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","columnProp","isObject","_classNames","colSizeInterfix","colClass","push","mapToCssModules","classNames","_colClass","classes","React","createElement","_extends","rowColsPropType","noGutters","Row","inverse","color","body","outline","innerRef","func","Card","ref","CardBody","CardHeader","element","isCheckbox","Error","param","getAttribute","validations","JSON","parse","m","validator","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","isIn","Object","keys","some","val","CardFooter"],"mappings":"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","file":"static/js/29.70775552.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport { Row, Col, Input, Card, CardHeader, CardBody, CardFooter, CustomInput } from 'reactstrap';\r\n\r\nimport FormValidator from './FormValidator.js';\r\n\r\n/**\r\n * Validation flow using controlled components\r\n *\r\n * 1- User type on input\r\n * 2- onChange event trigger validation\r\n * 3- Validate methods are listed using \"data-validate\"\r\n *    attribute. Content must be an array in json format.\r\n * 4- The validation returns an object with format {[input name]: status}\r\n *    where status is an array of boolean per each method\r\n * 5- Methods that requires an argument, read the 'data-param' attribute\r\n * 6- Similarly, onSubmit event does a bulk validation on all form elements\r\n */\r\n\r\nclass FormValidation extends Component {\r\n\r\n    state = {\r\n        /* Group each form state in an object.\r\n           Property name MUST match the form name */\r\n        formRegister: {\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            terms: false\r\n        },\r\n        formLogin: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        formDemo: {\r\n            text: '',\r\n            email: '',\r\n            number: '',\r\n            integer: '',\r\n            alphanum: '',\r\n            url: '',\r\n            password: '',\r\n            password2: '',\r\n            minlength: '',\r\n            maxlength: '',\r\n            length: '',\r\n            minval: '',\r\n            maxval: '',\r\n            list: ''\r\n        }\r\n    }\r\n\r\n     /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n      */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\r\n\r\n        e.preventDefault()\r\n    }\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContentWrapper>\r\n                <div className=\"content-heading\">\r\n                    <div>Form Validation\r\n                        <small>Form validation based on Controlled Components.</small>\r\n                    </div>\r\n                </div>\r\n                { /* START row */ }\r\n                <Row>\r\n                    <Col lg={ 6 }>\r\n                        <form onSubmit={this.onSubmit} name=\"formRegister\" action=\"\">\r\n                            { /* START card */ }\r\n                            <Card className=\"card-default\">\r\n                                <CardHeader>\r\n                                    <div className=\"card-title\">Form Register</div>\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"col-form-label\">Email Address *</label>\r\n                                        <Input type=\"email\"\r\n                                            name=\"email\"\r\n                                            invalid={this.hasError('formRegister','email','required')||this.hasError('formRegister','email','email')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"required\", \"email\"]'\r\n                                            value={this.state.formRegister.email}/>\r\n                                        { this.hasError('formRegister','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                        { this.hasError('formRegister','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"col-form-label\">Password *</label>\r\n                                        <Input type=\"text\"\r\n                                            id=\"id-password\"\r\n                                            name=\"password\"\r\n                                            invalid={this.hasError('formRegister','password','required')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"required\"]'\r\n                                            value={this.state.formRegister.password}\r\n                                        />\r\n                                        <span className=\"invalid-feedback\">Field is required</span>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"col-form-label\">Confirm Password *</label>\r\n                                        <Input type=\"text\" name=\"password2\"\r\n                                            invalid={this.hasError('formRegister','password2','equalto')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"equalto\"]'\r\n                                            value={this.state.formRegister.password2}\r\n                                            data-param=\"id-password\"\r\n                                        />\r\n                                        <span className=\"invalid-feedback\">Field must be equal to previous</span>\r\n                                    </div>\r\n                                    <div className=\"required\">* Required fields</div>\r\n                                </CardBody>\r\n                                <CardFooter>\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <CustomInput type=\"checkbox\" id=\"terms\"\r\n                                            name=\"terms\"\r\n                                            label=\"I agree with the terms\"\r\n                                            invalid={this.hasError('formRegister','terms','required')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"required\"]'\r\n                                            checked={this.state.formRegister.terms}>\r\n                                                <span className=\"invalid-feedback\">Field is required</span>\r\n                                            </CustomInput>\r\n                                        <div className=\"ml-auto\">\r\n                                            <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </CardFooter>\r\n                            </Card>\r\n                            { /* END card */ }\r\n                        </form>\r\n                    </Col>\r\n                    <Col lg={ 6 }>\r\n                        <form onSubmit={this.onSubmit} method=\"post\" name=\"formLogin\">\r\n                            { /* START card */ }\r\n                            <Card className=\"card-default\">\r\n                                <CardHeader>\r\n                                    <div className=\"card-title\">Form Login</div>\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"col-form-label\">Email Address *</label>\r\n                                        <Input type=\"email\"\r\n                                            name=\"email\"\r\n                                            invalid={this.hasError('formLogin','email','required')||this.hasError('formLogin','email','email')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"required\", \"email\"]'\r\n                                            value={this.state.formLogin.email}/>\r\n                                        { this.hasError('formLogin','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                        { this.hasError('formLogin','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"col-form-label\">Password *</label>\r\n                                        <Input type=\"text\"\r\n                                            id=\"id-password\"\r\n                                            name=\"password\"\r\n                                            invalid={this.hasError('formLogin','password','required')}\r\n                                            onChange={this.validateOnChange}\r\n                                            data-validate='[\"required\"]'\r\n                                            value={this.state.formLogin.password}\r\n                                        />\r\n                                        <span className=\"invalid-feedback\">Field is required</span>\r\n                                    </div>\r\n                                    <div className=\"required\">* Required fields</div>\r\n                                </CardBody>\r\n                                <CardFooter>\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n                                </CardFooter>\r\n                            </Card>\r\n                            { /* END card */ }\r\n                        </form>\r\n                    </Col>\r\n                </Row>\r\n                { /* END row */ }\r\n                { /* START row */ }\r\n                <Row>\r\n                    <div className=\"col-md-12\">\r\n                        <form onSubmit={this.onSubmit} action=\"\" name=\"formDemo\">\r\n                            { /* START card */ }\r\n                            <Card className=\"card-default\">\r\n                                <CardHeader>\r\n                                    <div className=\"card-title\">Fields validation</div>\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <legend className=\"mb-4\">Type validation</legend>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Required Text</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"text\"\r\n                                                    invalid={this.hasError('formDemo','text','required')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"required\"]'\r\n                                                    value={this.state.formDemo.text}\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field is required</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Email</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    invalid={this.hasError('formDemo','email','required')||this.hasError('formDemo','email','email')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"required\", \"email\"]'\r\n                                                    value={this.state.formDemo.email}/>\r\n                                                { this.hasError('formDemo','email','required') && <span className=\"invalid-feedback\">Field is required</span> }\r\n                                                { this.hasError('formDemo','email','email') && <span className=\"invalid-feedback\">Field must be valid email</span> }\r\n                                            </Col>\r\n                                            <Col md={ 4 }></Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Number</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"number\"\r\n                                                    invalid={this.hasError('formDemo','number','number')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"number\"]'\r\n                                                    value={this.state.formDemo.number}/>\r\n                                                <span className=\"invalid-feedback\">Field must be valid number</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Integer</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"integer\"\r\n                                                    invalid={this.hasError('formDemo','integer','integer')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"integer\"]'\r\n                                                    value={this.state.formDemo.integer}/>\r\n                                                <span className=\"invalid-feedback\">Field must be an integer</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Alphanum</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"alphanum\"\r\n                                                    invalid={this.hasError('formDemo','alphanum','alphanum')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"alphanum\"]'\r\n                                                    value={this.state.formDemo.alphanum}/>\r\n                                                <span className=\"invalid-feedback\">Field must be alpha numeric</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Url</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"url\"\r\n                                                    invalid={this.hasError('formDemo','url','url')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"url\"]'\r\n                                                    value={this.state.formDemo.url}/>\r\n                                                <span className=\"invalid-feedback\">Field must be valid url</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Equal to</label>\r\n                                            <div className=\"col-sm-3\">\r\n                                                <Input type=\"text\"\r\n                                                    id=\"id-source\"\r\n                                                    name=\"password\"\r\n                                                    invalid={this.hasError('formDemo','password','required')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"required\"]'\r\n                                                    value={this.state.formDemo.password}\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field is required</span>\r\n                                            </div>\r\n                                            <div className=\"col-sm-3\">\r\n                                                <Input type=\"text\" name=\"password2\"\r\n                                                    invalid={this.hasError('formDemo','password2','equalto')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"equalto\"]'\r\n                                                    value={this.state.formDemo.password2}\r\n                                                    data-param=\"id-source\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must be equal to previous</span>\r\n                                            </div>\r\n                                            <Col md={ 4 }>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <legend className=\"mb-4\">Range validation</legend>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Minlength</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"minlength\"\r\n                                                    invalid={this.hasError('formDemo','minlength','minlen')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"minlen\"]'\r\n                                                    value={this.state.formDemo.minlength}\r\n                                                    data-param=\"6\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must have a valid length</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Min length of 6</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Maxlength</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"maxlength\"\r\n                                                    invalid={this.hasError('formDemo','maxlength','maxlen')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"maxlen\"]'\r\n                                                    value={this.state.formDemo.maxlength}\r\n                                                    data-param=\"10\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must have a valid length</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Max length of 10</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Length</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"length\"\r\n                                                    invalid={this.hasError('formDemo','length','len')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"len\"]'\r\n                                                    value={this.state.formDemo.length}\r\n                                                    data-param=\"[6, 10]\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must have a valid length</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Length between 6 and 10</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Min</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"number\"\r\n                                                    name=\"minval\"\r\n                                                    invalid={this.hasError('formDemo','minval','min')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"min\"]'\r\n                                                    value={this.state.formDemo.minval}\r\n                                                    data-param=\"6\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must have a minimun value</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Min value 6</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">Max</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"number\"\r\n                                                    name=\"maxval\"\r\n                                                    invalid={this.hasError('formDemo','maxval','max')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"max\"]'\r\n                                                    value={this.state.formDemo.maxval}\r\n                                                    data-param=\"6\"\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field must have a maximun value</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Max value 6</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <div className=\"form-group row align-items-center\">\r\n                                            <label className=\"col-md-2 col-form-label\">List</label>\r\n                                            <Col md={ 6 }>\r\n                                                <Input type=\"text\"\r\n                                                    name=\"list\"\r\n                                                    invalid={this.hasError('formDemo','list','list')}\r\n                                                    onChange={this.validateOnChange}\r\n                                                    data-validate='[\"list\"]'\r\n                                                    value={this.state.formDemo.list}\r\n                                                    data-param='[\"red\", \"pink\", \"black\"]'\r\n                                                />\r\n                                                <span className=\"invalid-feedback\">Field content not allowed</span>\r\n                                            </Col>\r\n                                            <Col md={ 4 }>\r\n                                                <code>Only allowed [\"red\", \"pink\", \"black\"]</code>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                </CardBody>\r\n                                <CardFooter className=\"text-center\">\r\n                                    <button type=\"submit\" className=\"btn btn-info\">Run validation</button>\r\n                                </CardFooter>\r\n                            </Card>\r\n                            { /* END card */ }\r\n                        </form>\r\n                    </div>\r\n                </Row>\r\n                { /* END row */ }\r\n            </ContentWrapper>\r\n            );\r\n    }\r\n\r\n}\r\n\r\nexport default FormValidation;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string, PropTypes.shape({\n  size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  tag: tagPropType,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Col = function Col(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      widths = props.widths,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"widths\", \"tag\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      var colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames)), cssModule));\n    } else {\n      var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n\n      colClasses.push(_colClass);\n    }\n  });\n\n  if (!colClasses.length) {\n    colClasses.push('col');\n  }\n\n  var classes = mapToCssModules(classNames(className, colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = propTypes;\nCol.defaultProps = defaultProps;\nexport default Col;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-footer'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardFooter.propTypes = propTypes;\nCardFooter.defaultProps = defaultProps;\nexport default CardFooter;"],"sourceRoot":""}