{"version":3,"sources":["components/Extras/Calendar.events.js","components/Extras/Calendar.js","components/Layout/ContentWrapper.js"],"names":["date","Date","d","getDate","m","getMonth","y","getFullYear","title","start","backgroundColor","borderColor","end","allDay","url","Calendar","calendarEvents","events","calendarPlugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","bootstrapPlugin","calendarHeader","left","center","right","evColors","state","selectedEvent","evRemoveOnDrop","evSelectedColor","evNewName","externalEvents","color","name","dayClick","setState","dateStr","handleEventReceive","info","styles","getComputedStyle","draggedEl","event","setProp","removeExternalEvent","textContent","addNewExternalEvent","concat","index","findIndex","e","splice","selectColor","handleCheck","target","checked","handleInputName","value","Draggable","this","refs","externalEventsList","itemSelector","eventData","eventEl","innerText","trim","addEvent","Math","random","push","evcolor","ContentWrapper","className","Card","CardHeader","CardTitle","tag","CardBody","ref","map","ev","id","type","onChange","htmlFor","placeholder","onClick","evc","getEvColorClasses","JSON","stringify","defaultView","dayGridMonth","plugins","themeSystem","header","editable","droppable","deepChangeDetection","dateClick","eventReceive","Component","props","unwrap","children","defaultProps"],"mappings":"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","file":"static/js/85.8f2375c6.chunk.js","sourcesContent":["// Date for the calendar events (dummy data)\r\nvar date = new Date();\r\nvar d = date.getDate(),\r\n    m = date.getMonth(),\r\n    y = date.getFullYear();\r\n\r\nexport default [\r\n    {\r\n        title: 'All Day Event',\r\n        start: new Date(y, m, 1),\r\n        backgroundColor: '#f56954', //red\r\n        borderColor: '#f56954' //red\r\n    },\r\n    {\r\n        title: 'Long Event',\r\n        start: new Date(y, m, d - 5),\r\n        end: new Date(y, m, d - 2),\r\n        backgroundColor: '#f39c12', //yellow\r\n        borderColor: '#f39c12' //yellow\r\n    },\r\n    {\r\n        title: 'Meeting',\r\n        start: new Date(y, m, d, 10, 30),\r\n        allDay: false,\r\n        backgroundColor: '#0073b7', //Blue\r\n        borderColor: '#0073b7' //Blue\r\n    },\r\n    {\r\n        title: 'Lunch',\r\n        start: new Date(y, m, d, 12, 0),\r\n        end: new Date(y, m, d, 14, 0),\r\n        allDay: false,\r\n        backgroundColor: '#00c0ef', //Info (aqua)\r\n        borderColor: '#00c0ef' //Info (aqua)\r\n    },\r\n    {\r\n        title: 'Birthday Party',\r\n        start: new Date(y, m, d + 1, 19, 0),\r\n        end: new Date(y, m, d + 1, 22, 30),\r\n        allDay: false,\r\n        backgroundColor: '#00a65a', //Success (green)\r\n        borderColor: '#00a65a' //Success (green)\r\n    },\r\n    {\r\n        title: 'Open Google',\r\n        start: new Date(y, m, 28),\r\n        end: new Date(y, m, 29),\r\n        url: '//google.com/',\r\n        backgroundColor: '#3c8dbc', //Primary (light-blue)\r\n        borderColor: '#3c8dbc' //Primary (light-blue)\r\n    }\r\n];\r\n","import React, { Component } from 'react';\r\nimport ContentWrapper from '../Layout/ContentWrapper';\r\nimport { Card, CardBody, CardHeader, CardTitle } from 'reactstrap';\r\n\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin, { Draggable } from '@fullcalendar/interaction';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\n\r\nimport '@fullcalendar/core/main.css';\r\nimport '@fullcalendar/daygrid/main.css';\r\nimport '@fullcalendar/timegrid/main.css';\r\nimport '@fullcalendar/list/main.css';\r\nimport '@fullcalendar/bootstrap/main.css';\r\n\r\nimport events from './Calendar.events';\r\n\r\nclass Calendar extends Component {\r\n    calendarEvents = events;\r\n\r\n    calendarPlugins = [\r\n        interactionPlugin,\r\n        dayGridPlugin,\r\n        timeGridPlugin,\r\n        listPlugin,\r\n        bootstrapPlugin\r\n    ];\r\n\r\n    calendarHeader = {\r\n        left: 'prev,next today',\r\n        center: 'title',\r\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\r\n    };\r\n\r\n    // External events properties\r\n\r\n    evColors = [\r\n        'danger',\r\n        'primary',\r\n        'info',\r\n        'success',\r\n        'warning',\r\n        'green',\r\n        'pink',\r\n        'inverse',\r\n        'purple'\r\n    ];\r\n\r\n    state = {\r\n        selectedEvent: null,\r\n        evRemoveOnDrop: false,\r\n        evSelectedColor: this.evColors[0],\r\n        evNewName: '',\r\n        externalEvents: [\r\n            { color: 'green', name: 'Lunch' },\r\n            { color: 'danger', name: 'Go home' },\r\n            { color: 'info', name: 'Do homework' },\r\n            { color: 'warning', name: 'Work on UI design' },\r\n            { color: 'inverse', name: 'Sleep tight' }\r\n        ]\r\n    };\r\n\r\n    componentDidMount() {\r\n        /* initialize the external events */\r\n        new Draggable(this.refs.externalEventsList, {\r\n            itemSelector: '.fce-event',\r\n            eventData: function(eventEl) {\r\n                return {\r\n                    title: eventEl.innerText.trim()\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    addRandomEvent() {\r\n        // add dynamically an event\r\n        this.addEvent({\r\n            title: 'Random Event',\r\n            start: new Date(\r\n                new Date().getFullYear(),\r\n                new Date().getMonth(),\r\n                Math.random() * (30 - 1) + 1\r\n            ),\r\n            backgroundColor: '#c594c5', //purple\r\n            borderColor: '#c594c5' //purple\r\n        });\r\n    }\r\n\r\n    dayClick = date => {\r\n        this.setState({\r\n            selectedEvent: {\r\n                date: date.dateStr\r\n            }\r\n        });\r\n    };\r\n\r\n    // add event directly into calendar\r\n    addEvent(event) {\r\n        this.calendarEvents.push(event);\r\n    }\r\n\r\n    handleEventReceive = info => {\r\n        var styles = getComputedStyle(info.draggedEl);\r\n        info.event.setProp('backgroundColor', styles.backgroundColor);\r\n        info.event.setProp('borderColor', styles.borderColor);\r\n\r\n        // is the \"remove after drop\" checkbox checked?\r\n        if (this.state.evRemoveOnDrop) {\r\n            this.removeExternalEvent(info.draggedEl.textContent);\r\n        }\r\n    };\r\n\r\n    getEvColorClasses(evcolor) {\r\n        return 'bg-' + evcolor + (this.state.evSelectedColor === evcolor ? ' selected' : '');\r\n    }\r\n\r\n    addNewExternalEvent = () => {\r\n        const externalEvents = this.state.externalEvents.concat({\r\n            color: this.state.evSelectedColor,\r\n            name: this.state.evNewName\r\n        });\r\n        this.setState({\r\n            externalEvents\r\n        });\r\n    };\r\n\r\n    removeExternalEvent = name => {\r\n        let externalEvents = [...this.state.externalEvents];\r\n        const index = externalEvents.findIndex(e => e.name === name);\r\n        if (index > -1) {\r\n            externalEvents.splice(index, 1);\r\n            this.setState({\r\n                externalEvents\r\n            });\r\n        }\r\n    };\r\n\r\n    selectColor = color => () => {\r\n        this.setState({\r\n            evSelectedColor: color\r\n        });\r\n    };\r\n\r\n    handleCheck = event => {\r\n        this.setState({\r\n            evRemoveOnDrop: event.target.checked\r\n        });\r\n    };\r\n\r\n    handleInputName = event => {\r\n        this.setState({\r\n            evNewName: event.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { externalEvents, selectedEvent } = this.state;\r\n        return (\r\n            <ContentWrapper>\r\n                <div className=\"content-heading\">\r\n                    <div>\r\n                        Big Calendar\r\n                        <small>React gcal/outlook like calendar component</small>\r\n                    </div>\r\n                </div>\r\n                <div className=\"calendar-app\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xl-3 col-lg-4\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-6 col-12\">\r\n                                    {/* START card */}\r\n                                    <Card className=\"card-default\" title=\"\">\r\n                                        <CardHeader>\r\n                                            <CardTitle tag=\"h4\">Draggable Events</CardTitle>\r\n                                        </CardHeader>\r\n                                        {/* Default external events list */}\r\n                                        <CardBody>\r\n                                            <div className=\"external-events\" ref=\"externalEventsList\">\r\n                                            {\r\n                                                externalEvents.map(ev =>\r\n                                                    <div className={'fce-event bg-' + ev.color} key={ev.name+ev.color}>{ev.name}</div>\r\n                                                )\r\n                                            }\r\n                                            </div>\r\n                                            <div className=\"custom-control custom-checkbox mt-3\">\r\n                                                <input className=\"custom-control-input\" id=\"drop-remove\" type=\"checkbox\" onChange={this.handleCheck}/>\r\n                                                <label className=\"custom-control-label\" htmlFor=\"drop-remove\">Remove after Drop</label>\r\n                                            </div>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                {/* END card */}\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-6 col-12\">\r\n                                    {/* START card */}\r\n                                    <Card className=\"card-default\">\r\n                                        <CardHeader>\r\n                                            <CardTitle tag=\"h4\">Create Event</CardTitle>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <div className=\"input-group mb-2\">\r\n                                                <input className=\"form-control\" type=\"text\" placeholder=\"Event name...\" onChange={this.handleInputName}/>\r\n                                                <div className=\"input-group-btn\">\r\n                                                    <button className=\"btn btn-secondary\" onClick={this.addNewExternalEvent} type=\"button\">Add</button>\r\n                                                </div>\r\n                                            </div>\r\n                                            <p className=\"text-muted\"><small>Choose a Color</small></p>\r\n                                            <ul className=\"list-inline\" id=\"external-event-color-selector\">\r\n                                                {\r\n                                                    this.evColors.map(evc =>\r\n                                                        <li className=\"list-inline-item p-0\" key={evc}>\r\n                                                            <div\r\n                                                                className={\"circle circle-xl \" + this.getEvColorClasses(evc)}\r\n                                                                onClick={this.selectColor(evc)}></div>\r\n                                                        </li>\r\n                                                    )\r\n                                                }\r\n                                            </ul>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                {/* END card */}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                {selectedEvent &&\r\n                                    <div>\r\n                                        <p>Selected:</p>\r\n                                        <div className=\"box-placeholder\">{JSON.stringify(selectedEvent)}</div>\r\n                                    </div>\r\n                                }\r\n                                {!selectedEvent &&\r\n                                    <div>\r\n                                        <p>Click calendar to show information</p>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-xl-9 col-lg-8\">\r\n                            <Card className=\"card-default\">\r\n                                <CardBody>\r\n                                    {/* START calendar */}\r\n                                    <FullCalendar\r\n                                        defaultView={this.dayGridMonth}\r\n                                        plugins={this.calendarPlugins}\r\n                                        events={this.calendarEvents}\r\n                                        themeSystem={\"bootstrap\"}\r\n                                        header={this.calendarHeader}\r\n                                        editable={true}\r\n                                        droppable={true}\r\n                                        deepChangeDetection={true}\r\n                                        dateClick={this.dayClick}\r\n                                        eventReceive={this.handleEventReceive}\r\n                                        >\r\n                                    </FullCalendar>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ContentWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Wrapper element for template content\r\n */\r\nconst ContentWrapper = props =>(\r\n    <div className=\"content-wrapper\">\r\n        {props.unwrap ?\r\n            (<div className=\"unwrap\">{props.children}</div>)\r\n            :\r\n            (props.children)\r\n        }\r\n    </div>\r\n)\r\n\r\nContentWrapper.propTypes = {\r\n    /** add element with 'unwrap' class to expand content area */\r\n    unwrap: PropTypes.bool\r\n}\r\nContentWrapper.defaultProps = {\r\n    unwrap: false\r\n}\r\n\r\nexport default ContentWrapper;\r\n"],"sourceRoot":""}